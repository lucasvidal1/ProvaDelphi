unit Test.Model.Tarefa1;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, FireDAC.Stan.Option, FireDAC.Phys.FBDef, FireDAC.Stan.Async,
  FireDAC.Phys.IBBase, FireDAC.DatS, FireDAC.Phys.FB, FireDAC.Stan.Error, Data.DB,
  FireDAC.DApt, FireDAC.Comp.DataSet, ProvaDelphiApp.Model.Interfaces, uspQuery,
  ProvaDelphiApp.Model.Tarefa1, FireDAC.Phys, FireDAC.Comp.Client,
  FireDAC.Stan.Param, FireDAC.DApt.Intf, FireDAC.Stan.Intf, FireDAC.Phys.Intf,
  ProvaDelphiApp.Model.Tarefa3, Vcl.Forms, Datasnap.DBClient;

type
  // Test methods for class TModelTarefa1

  TestTModelTarefa1 = class(TTestCase)
  strict private
    FModelTarefa1: TModelTarefa1;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestGetSQL;
    procedure TestGetSQLExcpetion1;
    procedure TestGetSQLExcpetion2;
  end;

implementation

uses
  System.SysUtils;

procedure TestTModelTarefa1.SetUp;
begin
  FModelTarefa1 := TModelTarefa1.Create;
end;

procedure TestTModelTarefa1.TearDown;
begin
  FModelTarefa1.Free;
  FModelTarefa1 := nil;
end;

procedure TestTModelTarefa1.TestGetSQL;
var
  AColunas: String;
  ATabelas: String;
  ACondicoes: String;
  ReturnValue: string;
  ExpectedValue: String;
begin
  AColunas := 'CODIGO, NOME';
  ATabelas := 'CLIENTES';
  ACondicoes := '';
  ExpectedValue := 'select CODIGO, NOME from CLIENTES';

  ReturnValue := TModelTarefa1.New.Colunas(AColunas).Tabelas(ATabelas)
    .Condicoes(ACondicoes).GerarSQL.GetSQL;

  CheckEquals(ExpectedValue, ReturnValue, 'A função TestGetSQL falhou.');
end;

procedure TestTModelTarefa1.TestGetSQLExcpetion1;
var
  AColunas: String;
  ATabelas: String;
  ACondicoes: String;
  ReturnValue: string;
  ExpectedValue: String;
begin
  AColunas := '';
  ATabelas := '';
  ACondicoes := '';
  ExpectedValue := 'Informe uma tabela para a geração do SQL.';

  try
    ReturnValue := TModelTarefa1.New.Colunas(AColunas).Tabelas(ATabelas)
      .Condicoes(ACondicoes).GerarSQL.GetSQL;
  except
    on E: Exception do
    begin
      ReturnValue := E.Message;
    end;
  end;

  CheckEquals(ExpectedValue, ReturnValue, 'A função TestGetSQLExcpetion1 falhou.');
end;

procedure TestTModelTarefa1.TestGetSQLExcpetion2;
var
  AColunas: String;
  ATabelas: String;
  ACondicoes: String;
  ReturnValue: string;
  ExpectedValue: String;
begin
  AColunas := '';
  ATabelas := 'TABELA1, TABELA2';
  ACondicoes := '';
  ExpectedValue := 'É permitido informar apenas uma tabela para a geração do SQL.';

  try
    ReturnValue := TModelTarefa1.New.Colunas(AColunas).Tabelas(ATabelas)
      .Condicoes(ACondicoes).GerarSQL.GetSQL;
  except
    on E: Exception do
    begin
      ReturnValue := E.Message;
    end;
  end;

  CheckEquals(ExpectedValue, ReturnValue, 'A função TestGetSQLExcpetion2 falhou.');
end;

initialization

  RegisterTest(TestTModelTarefa1.Suite);
end.

