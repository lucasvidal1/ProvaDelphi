unit Test.Controller.Tarefa1;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, ProvaDelphiApp.Controller.Tarefa1,
  ProvaDelphiApp.Controller.Interfaces, ProvaDelphiApp.Model.Interfaces;

type
  // Test methods for class TControllerTarefa1

  TestTControllerTarefa1 = class(TTestCase)
  strict private
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestGetSQL;
    procedure TestGetSQLExcpetion1;
    procedure TestGetSQLExcpetion2;
  end;

implementation

uses
  System.SysUtils;

procedure TestTControllerTarefa1.SetUp;
begin

end;

procedure TestTControllerTarefa1.TearDown;
begin

end;

procedure TestTControllerTarefa1.TestGetSQL;
var
  AColunas: String;
  ATabelas: String;
  ACondicoes: String;
  ReturnValue: string;
  ExpectedValue: String;
begin
  AColunas := 'CODIGO, NOME';
  ATabelas := 'CLIENTES';
  ACondicoes := '';
  ExpectedValue := 'select CODIGO, NOME from CLIENTES';

  ReturnValue := TControllerTarefa1.New.Colunas(AColunas).Tabelas(ATabelas)
    .Condicoes(ACondicoes).GerarSQL.GetSQL;

  CheckEquals(ExpectedValue, ReturnValue, 'A função TestGetSQL falhou.');
end;

procedure TestTControllerTarefa1.TestGetSQLExcpetion1;
var
  AColunas: String;
  ATabelas: String;
  ACondicoes: String;
  ReturnValue: string;
  ExpectedValue: String;
begin
  AColunas := '';
  ATabelas := '';
  ACondicoes := '';
  ExpectedValue := 'Informe uma tabela para a geração do SQL.';

  try
    ReturnValue := TControllerTarefa1.New.Colunas(AColunas).Tabelas(ATabelas)
      .Condicoes(ACondicoes).GerarSQL.GetSQL;
  except
    on E: Exception do
    begin
      ReturnValue := E.Message;
    end;
  end;

  CheckEquals(ExpectedValue, ReturnValue, 'A função TestGetSQLExcpetion1 falhou.');
end;

procedure TestTControllerTarefa1.TestGetSQLExcpetion2;
var
  AColunas: String;
  ATabelas: String;
  ACondicoes: String;
  ReturnValue: string;
  ExpectedValue: String;
begin
  AColunas := '';
  ATabelas := 'TABELA1, TABELA2';
  ACondicoes := '';
  ExpectedValue := 'É permitido informar apenas uma tabela para a geração do SQL.';

  try
    ReturnValue := TControllerTarefa1.New.Colunas(AColunas).Tabelas(ATabelas)
      .Condicoes(ACondicoes).GerarSQL.GetSQL;
  except
    on E: Exception do
    begin
      ReturnValue := E.Message;
    end;
  end;

  CheckEquals(ExpectedValue, ReturnValue, 'A função TestGetSQLExcpetion2 falhou.');
end;

initialization

RegisterTest(TestTControllerTarefa1.Suite);

end.
